@page "/"

<PageTitle>Wikipedia data</PageTitle>

@using System.Text.Json.Nodes
@using WikiPosition.Pages.Models
@using WikiPosition.Data.Model
@using WikiPosition.Data.Service
@inject WikipediaQueryService WikipediaQueryService
@inject IJSRuntime JS


<h1>Wikipedia data</h1>

<p>This component demonstrates fetching data from a service.</p>

<EditForm Model="@wikipediaQueryInputModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputNumber id="latitude" @bind-Value="wikipediaQueryInputModel.Latitude" />
    <InputNumber id="longitude" @bind-Value="wikipediaQueryInputModel.Longitude" />

    <button type="submit">Submit</button>
</EditForm>



@if (positions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>PageId</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Distance</th>
                <th>Ns</th>
                <th>Primary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var position in positions)
            {
                <tr>
                    <td>@position.Title</td>
                    <td>@position.PageId</td>
                    <td>@position.Latitude</td>
                    <td>@position.Longitude</td>
                    <td>@position.Distance</td>
                    <td>@position.Ns</td>
                    <td>@position.Primary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WikipediaPagePosition>? positions;
    
    private WikipediaQueryInputModel wikipediaQueryInputModel = new ();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {  
        try
        {
            var result = await JS.InvokeAsync<JsonArray>("getCoords");
            positions = await WikipediaQueryService.GetLocalWikipediaPages(double.Parse(result[0].ToString()), double.Parse(result[1].ToString()));
            InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }
        catch(Exception ex){
            Console.WriteLine(ex.ToString());
        }finally{
            await base.OnAfterRenderAsync(firstRender);
        }
    }

    

    private async Task HandleValidSubmit()
    {
        positions = await WikipediaQueryService
                        .GetLocalWikipediaPages(
                            wikipediaQueryInputModel.Latitude,
                            wikipediaQueryInputModel.Longitude);
    }
}
